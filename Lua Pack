--Hitbox Hit Draw

local UI_REF = gui.Reference( "VISUALS", "ENEMIES", "Options" );

local DrawHitboxHitText = gui.Text( UI_REF, "Draw Hitbox Hit");
local DrawHitboxHit = gui.Checkbox( UI_REF, "lua_drawhitboxhit", "Draw", 0 );
local HitboxDrawTime = gui.Slider( UI_REF, "lua_drawhitboxhit_time", "Draw Time in Seconds", 2, 1, 10 );
local HitboxDrawSize= gui.Slider( UI_REF, "lua_drawhitboxhit_size", "Draw Size", 6, 1, 25 ); 

local text_font = draw.CreateFont("Verdana", 12, 400);

local hitboxes = {};
local hitbox_text = {};
local ticks = {};

local function HitGroup( INT_HITGROUP )
  if INT_HITGROUP == 0 then
      return "body";
  elseif INT_HITGROUP == 1 then
      return "head";
  elseif INT_HITGROUP == 2 then
      return "chest";
  elseif INT_HITGROUP == 3 then
      return "stomach";
  elseif INT_HITGROUP == 4 then 
      return "left arm";
  elseif INT_HITGROUP == 5 then 
      return "right arm";
  elseif INT_HITGROUP == 6 then 
      return "left leg";
  elseif INT_HITGROUP == 7 then 
      return "right leg";
  elseif INT_HITGROUP == 8 then 
        return "hitbox 8";
  elseif INT_HITGROUP == 9 then 
     return "hitbox 9";
  elseif INT_HITGROUP == 10 then 
      return "body";
  end
end

local function on_player_death(e)
  if (e:GetName() == "player_hurt" and DrawHitboxHit:GetValue()) then
     local ENTITY_LOCAL_PLAYER = client.GetLocalPlayerIndex();
  
     local ID_VICTIM, ID_ATTACKER, HITGROUP, BONE = e:GetInt("userid"), e:GetInt("attacker"), e:GetInt("hitgroup"),  e:GetInt("boneIndex");
     local INDEX_VICTIM, INDEX_ATTACKER = client.GetPlayerIndexByUserID(ID_VICTIM), client.GetPlayerIndexByUserID(ID_ATTACKER);
  
     if (INDEX_ATTACKER == ENTITY_LOCAL_PLAYER and INDEX_VICTIM ~= ENTITY_LOCAL_PLAYER) then

        local ENEMY = entities.GetByUserID(ID_VICTIM);
        local HITBOX_POS = {ENEMY:GetHitboxPosition(HITGROUP)};
        local HIT_TEXT = HitGroup(HITGROUP);

        if(HITBOX_POS ~= nil) then
           table.insert(hitboxes, HITBOX_POS);
           table.insert(hitbox_text, HIT_TEXT);
           table.insert(ticks, common.Time());
        end
     end
  end
end

local function render_hitpos()
  local player = entities.GetLocalPlayer();

  if DrawHitboxHit:GetValue() and player ~= nil and player:IsAlive() then
     for index = 1, #hitboxes do
        if (hitboxes[index] ~= nil and
           ticks[index] ~= nil) then

           local HITBOX = hitboxes[index];
           local screen_x, screen_y = client.WorldToScreen(HITBOX[1], HITBOX[2], HITBOX[3]);

           if(screen_x ~= nil and screen_y ~= nil) then
              local drawSize = HitboxDrawSize:GetValue() / 2;
              draw.Color(255, 0, 0, 255);
              draw.FilledRect(screen_x - drawSize, screen_y - drawSize, screen_x + drawSize, screen_y + drawSize);
              draw.Color(0, 0, 0, 255);
              draw.OutlinedRect(screen_x - drawSize, screen_y - drawSize, screen_x + drawSize, screen_y + drawSize);
              draw.Color(255, 255, 255, 255);
              draw.SetFont(text_font);
              local text_size_x, text_size_y = draw.GetTextSize(hitbox_text[index]);
              draw.Text(screen_x - text_size_x/2, screen_y + drawSize*0.8, hitbox_text[index] );
              draw.TextShadow(screen_x - text_size_x/2, screen_y + drawSize*0.8, hitbox_text[index] );



              local tick_difference = common.Time() - ticks[index];

              if (tick_difference > HitboxDrawTime:GetValue()) then
                 table.remove(hitboxes, index);
                 table.remove(hitbox_text, index);
                 table.remove(ticks, index);
              end
           else
              table.remove(hitboxes, index);
              table.remove(hitbox_text, index);
              table.remove(ticks, index);
           end
        end
     end
  end
end

callbacks.Register( "Draw", "render_hitpos", render_hitpos);

client.AllowListener("player_hurt");
callbacks.Register("FireGameEvent", "HS_SOUND", on_player_death);



--Disablepostprocessing

local VIS_MAIN_REF = gui.Reference( "MISC", "GENERAL", "Extra" );

local DisablePostProcessing = gui.Checkbox( VIS_MAIN_REF, "lua_disablepostprocess", "Disable Post Processing", 0 );

local function PostProcessing()

	if DisablePostProcessing:GetValue() then
		client.SetConVar( "mat_postprocess_enable", 0, true );
	else
		client.SetConVar( "mat_postprocess_enable", 1, true );
	end

end

callbacks.Register( "Draw", "Disable Post Processing", PostProcessing )



--Sniper Crosshair

local VIS_MAIN_REF = gui.Reference( "VISUALS", "Shared" );

local SniperCrosshairCheckbox = gui.Checkbox( VIS_MAIN_REF, "lua_snipercrosshair", "Sniper Crosshair", 0 );

local function SniperCrosshair()

	if SniperCrosshairCheckbox:GetValue() then
		if entities.GetLocalPlayer() ~= nil then
			local LocalPlayerEntity = entities.GetLocalPlayer();

			local Alive = LocalPlayerEntity:IsAlive();			
			local isScoped = LocalPlayerEntity:GetPropInt( "m_bIsScoped" );
	
			local Thirdperson = gui.GetValue( "vis_thirdperson_dist" );
			local Scoperemover = gui.GetValue( "vis_scoperemover" );

			if Alive then
				if Scoperemover ~= 1 then
					if ( isScoped == 1 or isScoped == 257 or Thirdperson > 0 ) then
						client.SetConVar( "weapon_debug_spread_show", 0, true );
					else
						client.SetConVar( "weapon_debug_spread_show", 3, true );
					end
				elseif Scoperemover == 1 then
					if ( Thirdperson > 0 and isScoped == 0 or isScoped == 257 ) then
						client.SetConVar( "weapon_debug_spread_show", 0, true );
					else
						client.SetConVar( "weapon_debug_spread_show", 3, true );
					end
				end
			else
				client.SetConVar( "weapon_debug_spread_show", 0, true );
			end
		end
	else
		client.SetConVar( "weapon_debug_spread_show", 0, true );
	end

end

callbacks.Register( "Draw", "Sniper Crosshair", SniperCrosshair )



--Viewmodel changer 

local xO = 0;   local yO = 0;   local zO = 0;   local fO = 0;   
local function cache()   xO = client.GetConVar("viewmodel_offset_x");   yO = client.GetConVar("viewmodel_offset_y");   zO = client.GetConVar("viewmodel_offset_z");   fO = client.GetConVar("viewmodel_fov");   end cache()
local visref = gui.Reference("SETTINGS", "Miscellaneous");  
local wind = gui.Window("wind", "Viewmodel Extender", 200,200,200,270);
local gr = gui.Groupbox(wind, "Viewmodel Stuff", 10,10, 180,218)
local c = gui.Checkbox(visref, "c", "Show Viewmodel Extender", false)
local xS = gui.Slider(gr, "xS", "X", xO, -20, 20);   
local yS = gui.Slider(gr, "yS", "Y", yO, -100, 100);   
local zS = gui.Slider(gr, "zS", "Z", zO, -20, 20);   
local vfov = gui.Slider(gr, "vfov", "Viewmodel FOV", fO, 0, 120);   

function doesthing()
if c:GetValue() then wind:SetActive(1); else wind:SetActive(0); end
client.SetConVar("viewmodel_offset_x", xS:GetValue(), true); 
client.SetConVar("viewmodel_offset_y", yS:GetValue(), true); 
client.SetConVar("viewmodel_offset_z", zS:GetValue(), true); 
client.SetConVar("viewmodel_fov", vfov:GetValue(), true); end
callbacks.Register("Draw", "sets", doesthing);

-- Grenade timers

local updatetick = 0;
local grenades = {};

function EventHook(Event)

if Event:GetName() == "round_start" then
grenades = {};
end

if Event:GetName() == "hegrenade_detonate" or Event:GetName() == "flashbang_detonate" 
or Event:GetName() == "inferno_expire" or Event:GetName() == "inferno_extinguish" then 
updatetick = globals.TickCount(); 
for index,value in pairs(grenades) do 
if value[1] == Event:GetInt("entityid") then
table.remove(grenades, index);
end
end 
end
end

function ESPHook(Builder)
-- Smoke Grenades
if Builder:GetEntity():GetClass() == "CSmokeGrenadeProjectile" 
and Builder:GetEntity():GetProp("m_nSmokeEffectTickBegin") ~= 0 then
delta = (globals.TickCount() - Builder:GetEntity():GetProp("m_nSmokeEffectTickBegin")) * globals.TickInterval();
Builder:AddBarBottom( 1 - (delta/17.5) )
-- Flash and HE Grenades
elseif Builder:GetEntity():GetClass() == "CBaseCSGrenadeProjectile" then
local found = false;
for index,value in pairs(grenades) do
if value[1] == Builder:GetEntity():GetIndex() then
DeltaT = (globals.TickCount() - grenades[index][2]) * globals.TickInterval();
Builder:AddBarBottom( 1 - (DeltaT/1.65) )
found = true;
break;
end
end
if found == false and globals.TickCount() > updatetick then
local gMatrix = {Builder:GetEntity():GetIndex(), globals.TickCount()};
table.insert(grenades, gMatrix);
end
end
end

function DrawingHook() 
for indexF,valueF in pairs(entities.FindByClass("CInferno")) do
local found = false;
for indexT,valueT in pairs(grenades) do
if valueT[1] == valueF:GetIndex() then
x, y = client.WorldToScreen( valueF:GetAbsOrigin() )
local mollysize = 25;
if x ~= nil and y ~= nil then
draw.Color(0, 0, 0, 255);
draw.RoundedRectFill( x - mollysize, y, x + mollysize, y + 4 );
draw.Color(227, 227, 227, 255);
local math = (((globals.TickCount() - valueT[2]) * ((-1) - 1))
/ ( (valueT[2] + 7 / globals.TickInterval()) - valueT[2])) + 1
draw.RoundedRectFill( x - mollysize, y, x + mollysize * math, y + 4 )
draw.Color(255, 255, 255, 255);
draw.RoundedRect( x - mollysize, y, x + mollysize, y + 4) 
local w,h = draw.GetTextSize( "MOLLY" ) 
draw.Text(x - w/2, y - h * 1.25 , "MOLLY");
draw.TextShadow(x - w/2, y - h * 1.25 , "MOLLY");
end 
found = true;
break;
end
end

if found == false and globals.TickCount() > updatetick then
local gMatrix = {valueF:GetIndex(), globals.TickCount()};
table.insert(grenades, gMatrix);
end
end
end

client.AllowListener("round_start");
client.AllowListener("inferno_expire");
client.AllowListener("inferno_extinguish");
client.AllowListener("molotov_detonate");
client.AllowListener("hegrenade_detonate");
client.AllowListener("flashbang_detonate");
callbacks.Register("FireGameEvent", "EventHookG", EventHook);
callbacks.Register( "Draw", "DrawingHookG", DrawingHook );
callbacks.Register( "DrawESP", "ESPHookG", ESPHook );

drawBar = false
firstTime = 0
timeSincePlant = 0
fill = 0
fps = "fps";
count = 0;
last = globals.RealTime();
r = 0
g = 0
b = 0
stoplagwithcolourpicking = 1
configs = {}
v = {}

fontTable =
{
  [0] = "Arial",
  [1] = "Arial Bold",
  [2] = "Calibri",
  [3] = "Comic Sans MS",
  [4] = "Tahoma"
}

function colourBcDumbass(value)

    if value == 0 then
    
        r = 255
        g = 0
        b = 0
    
    end
    
    if value == 1 then
    
        r = 0
        g = 255
        b = 0
    
    end
    
    if value == 2 then
    
        r = 0
        g = 0
        b = 255
    
    end
    
    if value == 3 then
    
        r = 255
        g = 255
        b = 255
    
    end
    
    if value == 4 then
    
        r = 0
        g = 0
        b = 0
    
    end

end

--no blood 

callbacks.Register("CreateMove", function()
    if client.GetConVar("violence_hblood") ~= 0 then
        client.SetConVar("violence_hblood", 0, true)
    end
end)

--fadingfake

local defusing = false;
local plantedat = 0;
local planter = "???";
local planting = false;
local bombsite = "???";
local plantingStarted = 0;

local function lerp_pos(x1, y1, z1, x2, y2, z2, percentage) 

local x = (x2 - x1) * percentage + x1 
local y = (y2 - y1) * percentage + y1
local z = (z2 - z1) * percentage + z1 

return x, y, z 

end

local function sitename(site) 

local a_x, a_y, a_z = entities.GetPlayerResources():GetProp("m_bombsiteCenterA") 
local b_x, b_y, b_z = entities.GetPlayerResources():GetProp("m_bombsiteCenterB") 
local site_x1, site_y1, site_z1 = site:GetMins() 
local site_x2, site_y2, site_z2 = site:GetMaxs() 
local site_x, site_y, site_z = lerp_pos(site_x1, site_y1, site_z1, site_x2, site_y2, site_z2, 0.5) 
local distance_a, distance_b = vector.Distance(site_x, site_y, site_z, a_x, a_y, a_z), vector.Distance(site_x, site_y, site_z, b_x, b_y, b_z)

return distance_b > distance_a and "A" or "B" 

end

function EventHook(Event)

if Event:GetName() == "bomb_beginplant" then 

planter = client.GetPlayerNameByUserID(Event:GetInt("userid")) 
plantingStarted = globals.CurTime() 
bombsite = sitename(entities.GetByIndex(Event:GetInt("site")))
planting = true 


end

if Event:GetName() == "bomb_abortplant" then 

planting = false

end

if Event:GetName() == "bomb_begindefuse" then

defusing = true;

elseif Event:GetName() == "bomb_abortdefuse" then

defusing = false;

elseif Event:GetName() == "round_officially_ended" or Event:GetName() == "bomb_defused" or Event:GetName() == "bomb_exploded" then

defusing = false;
planting = false

end

if Event:GetName() == "bomb_planted" then

plantedat = globals.CurTime()
planting = false

end

end

function DrawingHook()

local font1 = draw.CreateFont("Verdana", 30)
local font2 = draw.CreateFont("Verdana", 23)
draw.SetFont(font1)

if planting == true then

local ScreenW, ScreenH = draw.GetScreenSize(); 
local PlantMath = (globals.CurTime() - plantingStarted) / 3.125
local PlantTime = math.floor((((plantingStarted - globals.CurTime()) + 3.125) * 10)) / 10

draw.Color(75,225,0,225)
draw.Text(ScreenW/100, 2, bombsite .. " - Planting")
draw.TextShadow(ScreenW/100, 2, bombsite .. " - Planting")
draw.Color(255,255,255,255)
draw.SetFont(font2)
draw.Text(ScreenW/100, 53, planter .. " - " .. PlantTime .. "s")
draw.TextShadow(ScreenW/100, 53, planter .. " - " .. PlantTime .. "s")
draw.Color(0, 0, 0, 170);
draw.FilledRect( 0, 0, ScreenW/200, ScreenH );
draw.Color(0, 255, 0, 255);
draw.FilledRect( 0, ScreenH - (ScreenH * PlantMath), ScreenW/200, ScreenH );
draw.Color(255, 255, 255, 255);

end

if entities.FindByClass("CPlantedC4")[1] ~= nil then

local Bomb = entities.FindByClass("CPlantedC4")[1];

if Bomb:GetProp("m_bBombTicking") and Bomb:GetProp("m_bBombDefused") == 0 and globals.CurTime() < Bomb:GetProp("m_flC4Blow") then

local ScreenW, ScreenH = draw.GetScreenSize(); 
local Player = entities.GetLocalPlayer(); 
local bombtimer = math.floor((plantedat - globals.CurTime() + Bomb:GetProp("m_flTimerLength")) * 10) / 10

if bombtimer < 0 then bombtimer = 0.0 end

if defusing == true then

local BombMath = ((globals.CurTime() - Bomb:GetProp("m_flDefuseCountDown")) * (0 - 1)) / ((Bomb:GetProp("m_flDefuseCountDown") - Bomb:GetProp("m_flDefuseLength")) - Bomb:GetProp("m_flDefuseCountDown")) + 1; 

draw.Color(0, 0, 0, 170);
draw.FilledRect( 0, 0, ScreenW/200, ScreenH );
draw.Color(0, 135, 255, 255);
draw.FilledRect( 0, ScreenH * BombMath, ScreenW/200, ScreenH );

if bombtimer < 5 then

draw.Color(240, 20, 0, 255);

elseif bombtimer < 10 then

draw.Color(210, 150, 0, 255);

else

draw.Color(75, 225, 0, 255);

end

draw.SetFont(font1)
draw.Text( ScreenW/100, 2, bombsite .. " - " .. bombtimer .. "s");
draw.TextShadow( ScreenW/100, 2, bombsite .. " - " .. bombtimer .. "s");
draw.Color(255, 255, 255, 255);

if Bomb:GetProp("m_flDefuseCountDown") > Bomb:GetProp("m_flC4Blow") then

draw.Color(255, 0, 0, 255);

end

local defusetime = math.floor( (Bomb:GetProp("m_flDefuseCountDown") - globals.CurTime()) * 10 ) / 10

draw.SetFont(font2)
draw.Text(ScreenW/100, 53, "Defusing - " .. defusetime .. "s")
draw.TextShadow(ScreenW/100, 53, "Defusing - " .. defusetime .. "s")

else

local BombMath = ((globals.CurTime() - Bomb:GetProp("m_flC4Blow")) * (0 - 1)) / ((Bomb:GetProp("m_flC4Blow") - Bomb:GetProp("m_flTimerLength")) - Bomb:GetProp("m_flC4Blow")) + 1;

draw.Color(0, 0, 0, 170);
draw.FilledRect( 0, 0, ScreenW/200, ScreenH );
draw.Color(0, 255, 0, 255);
draw.FilledRect( 0, ScreenH * BombMath, ScreenW/200, ScreenH );

if bombtimer < 5 then

draw.Color(240, 20, 0, 255);

elseif bombtimer < 10 then

draw.Color(210, 150, 0, 255);

else

draw.Color(75, 225, 0, 255);

end

draw.SetFont(font1)
draw.Text( ScreenW/100, 2, bombsite .. " - " .. bombtimer .. "s");
draw.TextShadow( ScreenW/100, 2, bombsite .. " - " .. bombtimer .. "s");

end

if Player:IsAlive() and globals.CurTime() < Bomb:GetProp("m_flC4Blow") then

local hpleft = math.floor(0.5 + BombDamage(Bomb, Player))

if hpleft >= Player:GetHealth() then

draw.Color(240, 20, 0, 255)
draw.SetFont(font2)
local formatting = draw.GetTextSize("FATAL")
draw.Text(ScreenW/2 - formatting/2, ScreenH/20, "FATAL");
draw.TextShadow(ScreenW/2 - formatting/2, ScreenH/20, "FATAL");

elseif hpleft <= 0 then return

else

draw.Color(75, 225, 0, 255)
draw.SetFont(font2)
local formattinghp = draw.GetTextSize("-" .. hpleft .. " HP")
draw.Text(ScreenW/2 - formattinghp/2, ScreenH/20, "-" .. hpleft .. " HP");
draw.TextShadow(ScreenW/2 - formattinghp/2, ScreenH/20, "-" .. hpleft .. " HP");

end
end

elseif Bomb:GetProp("m_bBombTicking") and Bomb:GetProp("m_bBombDefused") == 0 and globals.CurTime() < (Bomb:GetProp("m_flC4Blow") + 2) then

local ScreenW, ScreenH = draw.GetScreenSize(); 
local Player = entities.GetLocalPlayer(); 

if Player:IsAlive() and globals.CurTime() < (Bomb:GetProp("m_flC4Blow") + 1) then

local hpleft = math.floor(0.5 + BombDamage(Bomb, Player))

if hpleft >= Player:GetHealth() then

draw.Color(240, 20, 0, 255)
draw.SetFont(font2)
local formatting = draw.GetTextSize("FATAL")
draw.Text(ScreenW/2 - formatting/2, ScreenH/20, "FATAL");
draw.TextShadow(ScreenW/2 - formatting/2, ScreenH/20, "FATAL");

elseif hpleft <= 0 then return

else

draw.Color(75, 225, 0, 255)
draw.SetFont(font2)
local formattinghp = draw.GetTextSize("-" .. hpleft .. " HP")
draw.Text(ScreenW/2 - formattinghp/2, ScreenH/20, "-" .. hpleft .. " HP");
draw.TextShadow(ScreenW/2 - formattinghp/2, ScreenH/20, "-" .. hpleft .. " HP");

end
end
end
end
end

function BombDamage(Bomb, Player)

local C4Distance = math.sqrt((select(1,Bomb:GetAbsOrigin()) - select(1,Player:GetAbsOrigin())) ^ 2 + 
(select(2,Bomb:GetAbsOrigin()) - select(2,Player:GetAbsOrigin())) ^ 2 + 
(select(3,Bomb:GetAbsOrigin()) - select(3,Player:GetAbsOrigin())) ^ 2);

local Gauss = (C4Distance - 75.68) / 789.2 
local flDamage = 450.7 * math.exp(-Gauss * Gauss);

if Player:GetProp("m_ArmorValue") > 0 then

local flArmorRatio = 0.5;
local flArmorBonus = 0.5;

if Player:GetProp("m_ArmorValue") > 0 then

local flNew = flDamage * flArmorRatio;
local flArmor = (flDamage - flNew) * flArmorBonus;

if flArmor > Player:GetProp("m_ArmorValue") then

flArmor = Player:GetProp("m_ArmorValue") * (1 / flArmorBonus);
flNew = flDamage - flArmor;

end

flDamage = flNew;

end

end 

return math.max(flDamage, 0);

end

client.AllowListener( "bomb_beginplant" );
client.AllowListener( "bomb_abortplant" );
client.AllowListener( "bomb_begindefuse" );
client.AllowListener( "bomb_abortdefuse" ); 
client.AllowListener( "bomb_defused" );
client.AllowListener( "bomb_exploded" );
client.AllowListener( "round_officially_ended" );
client.AllowListener( "bomb_planted" );

callbacks.Register("FireGameEvent", "EventHookB", EventHook);
callbacks.Register("Draw", "DrawingHookB", DrawingHook)
